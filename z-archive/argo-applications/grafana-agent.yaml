apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: grafana-agent
  namespace: argocd
spec:
  project: default
  source:
    chart: grafana-agent
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 0.31.1
    helm:
      releaseName: grafana-agent
      values: |
        agent:
          configMap:
            content: |
              prometheus.remote_write "victoria_metrics" {
                endpoint {
                  url = "http://victoria-metrics.sd.ingtra.net:8428/api/v1/write"
                }
              }

              discovery.kubernetes "node" {
                role = "node"
              }

              discovery.kubernetes "pod" {
                role = "pod"
              }

              discovery.relabel "cadvisor" {
                targets = discovery.kubernetes.node.targets
                rule {
                  replacement   = "/metrics/cadvisor"
                  target_label  = "__metrics_path__"
                }
              }


              discovery.relabel "linkerd_controller" {
                targets = discovery.kubernetes.pod.targets
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "keep"
                  regex = "linkerd"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_port_name"]
                  action = "keep"
                  regex = "admin-http"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "component"
                }
              }

              discovery.relabel "linkerd_service_mirror" {
                targets = discovery.kubernetes.pod.targets
                rule {
                  source_labels = [
                    "__meta_kubernetes_pod_label_component",
                    "__meta_kubernetes_pod_container_port_name",
                  ]
                  action = "keep"
                  regex = "linkerd-service-mirror;admin-http$"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_container_name"]
                  action = "replace"
                  target_label = "component"
                }
              }

              discovery.relabel "linkerd_proxy" {
                targets = discovery.kubernetes.pod.targets
                rule {
                  source_labels = [
                    "__meta_kubernetes_pod_container_name",
                    "__meta_kubernetes_pod_container_port_name",
                    "__meta_kubernetes_pod_label_linkerd_io_control_plane_ns",
                  ]
                  action = "keep"
                  regex = "linkerd-proxy;linkerd-admin;linkerd$"
                }
                rule {
                  source_labels = ["__meta_kubernetes_namespace"]
                  action = "replace"
                  target_label = "namespace"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_name"]
                  action = "replace"
                  target_label = "pod"
                }
                rule {
                  source_labels = ["__meta_kubernetes_pod_label_linkerd_io_proxy_job"]
                  action = "replace"
                  target_label = "k8s_job"
                }
                rule {
                  action = "labeldrop"
                  regex = "__meta_kubernetes_pod_label_linkerd_io_proxy_job"
                }
                rule {
                  action = "labelmap"
                  regex = "__meta_kubernetes_pod_label_linkerd_io_proxy_(.+)"
                }
                rule {
                  action = "labeldrop"
                  regex = "__meta_kubernetes_pod_label_linkerd_io_proxy_(.+)"
                }
                rule {
                  action = "labelmap"
                  regex = "__meta_kubernetes_pod_label_linkerd_io_(.+)"
                }
                rule {
                  action = "labelmap"
                  regex = "__meta_kubernetes_pod_label_(.+)"
                  replacement = "__tmp_pod_label_$1"
                }
                rule {
                  action = "labelmap"
                  regex = "__tmp_pod_label_linkerd_io_(.+)"
                  replacement = "__tmp_pod_label_$1"
                }
                rule {
                  action = "labeldrop"
                  regex = "__tmp_pod_label_linkerd_io_(.+)"
                }
                rule {
                  action = "labelmap"
                  regex = "__tmp_pod_label_(.+)"
                }
              }

              prometheus.scrape "kubelet" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets  = discovery.kubernetes.node.targets
                scheme   = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }

              prometheus.scrape "cadvisor" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets  = discovery.relabel.cadvisor.output
                scheme   = "https"
                bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                tls_config {
                  insecure_skip_verify = true
                }
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }

              prometheus.scrape "linkerd_proxy" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets    = discovery.relabel.linkerd_proxy.output
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }

              prometheus.scrape "linkerd_controller" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets    = discovery.relabel.linkerd_controller.output
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }

              prometheus.scrape "linkerd_service_mirror" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets    = discovery.relabel.linkerd_service_mirror.output
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }
          
              prometheus.scrape "external" {
                clustering {
                  enabled = true
                }
                scrape_interval = "15s"
                scrape_timeout  = "14s"
                targets = [
                  {
                    __address__ = "victoria-metrics.sd.ingtra.net:8428",
                    __metrics_path__ = "/metrics",
                  },
                ]
                forward_to = [prometheus.remote_write.victoria_metrics.receiver]
              }
          clustering:
            enabled: true
          enableReporting: false
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 100m
              memory: 100Mi
        controller:
          type: deployment
          replicas: 2
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
